diff -ru ./src/ice_gnss.c ../ice-1.11.14_gnss/src/ice_gnss.c
--- ./src/ice_gnss.c	2023-02-14 14:44:32.000000000 +0100
+++ ../ice-1.11.14_gnss/src/ice_gnss.c	2023-03-06 17:33:10.362852214 +0100
@@ -184,15 +184,15 @@
 			goto exit_buf;
 	}
 
-	if (IS_REACHABLE(CONFIG_GNSS)) {
+//	if (IS_REACHABLE(CONFIG_GNSS)) {
 		count = gnss_insert_raw(pf->gnss_dev, buf, i);
 		if (count != i)
 			dev_warn(ice_pf_to_dev(pf),
 				 "gnss_insert_raw ret=%d size=%d\n",
 				 count, i);
-	} else {
-		dev_warn(ice_pf_to_dev(pf), "gnss module not reachable\n");
-	}
+//	} else {
+//		dev_warn(ice_pf_to_dev(pf), "gnss module not reachable\n");
+//	}
 
 exit_buf:
 	free_page((unsigned long)buf);
@@ -366,12 +366,12 @@
 	struct gnss_device *gdev = NULL;
 	int ret;
 
-	if (IS_REACHABLE(CONFIG_GNSS)) {
+//	if (IS_REACHABLE(CONFIG_GNSS)) {
 		gdev = gnss_allocate_device(ice_pf_to_dev(pf));
-	} else {
-		dev_warn(ice_pf_to_dev(pf), "gnss module not reachable\n");
-		return -ENODEV;
-	}
+//	} else {
+//		dev_warn(ice_pf_to_dev(pf), "gnss module not reachable\n");
+//		return -ENODEV;
+//	}
 
 	if (!gdev) {
 		dev_err(ice_pf_to_dev(pf),
@@ -402,10 +402,10 @@
 static void ice_gnss_deregister(struct ice_pf *pf)
 {
 	if (pf->gnss_dev) {
-		if (IS_REACHABLE(CONFIG_GNSS)) {
+//		if (IS_REACHABLE(CONFIG_GNSS)) {
 			gnss_deregister_device(pf->gnss_dev);
 			gnss_put_device(pf->gnss_dev);
-		}
+//		}
 		pf->gnss_dev = NULL;
 	}
 }
diff -ru ./src/ice_gnss.h ../ice-1.11.14_gnss/src/ice_gnss.h
--- ./src/ice_gnss.h	2023-02-14 14:44:32.000000000 +0100
+++ ../ice-1.11.14_gnss/src/ice_gnss.h	2023-03-06 17:33:54.883937252 +0100
@@ -48,17 +48,17 @@
 	struct list_head queue;
 };
 
-#if IS_ENABLED(CONFIG_GNSS)
+//#if IS_ENABLED(CONFIG_GNSS)
 void ice_gnss_init(struct ice_pf *pf);
 void ice_gnss_exit(struct ice_pf *pf);
 bool ice_gnss_is_gps_present(struct ice_hw *hw);
-#else
-static inline void ice_gnss_init(struct ice_pf *pf) { }
-static inline void ice_gnss_exit(struct ice_pf *pf) { }
-static inline bool ice_gnss_is_gps_present(struct ice_hw *hw)
-{
-	return false;
-}
-#endif /* IS_ENABLED(CONFIG_GNSS) */
+//#else
+//static inline void ice_gnss_init(struct ice_pf *pf) { }
+//static inline void ice_gnss_exit(struct ice_pf *pf) { }
+//static inline bool ice_gnss_is_gps_present(struct ice_hw *hw)
+//{
+//	return false;
+//}
+//#endif /* IS_ENABLED(CONFIG_GNSS) */
 #endif /* _ICE_GNSS_H_ */
 #endif /* GNSS_SUPPORT */
diff -ru ./src/ice.h ../ice-1.11.14_gnss/src/ice.h
--- ./src/ice.h	2023-02-14 14:44:32.000000000 +0100
+++ ../ice-1.11.14_gnss/src/ice.h	2023-03-06 17:34:33.403010819 +0100
@@ -63,9 +63,9 @@
 #include "kcompat_dim.h"
 #endif
 #ifdef GNSS_SUPPORT
-#if IS_ENABLED(CONFIG_GNSS)
+//#if IS_ENABLED(CONFIG_GNSS)
 #include <linux/gnss.h>
-#endif /* CONFIG_GNSS */
+//#endif /* CONFIG_GNSS */
 #endif /* GNSS_SUPPORT */
 #include "ice_ddp.h"
 #include "ice_devids.h"
@@ -974,10 +974,10 @@
 	u32 msg_enable;
 	struct ice_ptp ptp;
 #ifdef GNSS_SUPPORT
-#if IS_ENABLED(CONFIG_GNSS)
+//#if IS_ENABLED(CONFIG_GNSS)
 	struct gnss_serial *gnss_serial;
 	struct gnss_device *gnss_dev;
-#endif /* CONFIG_GNSS */
+//#endif /* CONFIG_GNSS */
 #endif
 	u16 num_rdma_msix;	/* Total MSIX vectors for RDMA driver */
 	u16 rdma_base_vector;
